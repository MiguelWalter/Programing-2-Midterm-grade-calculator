import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GradeCalculator extends JFrame {

    private JTextField prelimExamField, essayField, pvmField, javaBasicsField, introJsField;
    private JTextField java1Field, java2Field, js1Field, js2Field, mp1Field, mp2Field, mp3Field, mp3DocuField;
    private JLabel lectureGradeLabel, labGradeLabel, lectureMessageLabel, labMessageLabel;
    private JTextArea lectureComputationArea, labComputationArea;
    private JCheckBox[] absenceCheckBoxes; // Array to hold the checkboxes for absence dates
    private JCheckBox[] labAbsenceCheckBoxes; // Array to hold the checkboxes for lab absence dates

    public GradeCalculator() {
        setTitle("Grade Calculator");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        setSize(800, 600);
        setLocationRelativeTo(null); // Center the window

        // Main container with black background
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(1, 2, 20, 10)); // Increase spacing between panels
        mainPanel.setBackground(Color.BLACK); // Set background to black
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Lecture Panel
        JPanel lecturePanel = createLecturePanel();
        mainPanel.add(lecturePanel);

        // Laboratory Panel
        JPanel labPanel = createLabPanel();
        mainPanel.add(labPanel);

        // Add main panel to frame
        add(mainPanel);
        setVisible(true);
    }

    private JPanel createLecturePanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(Color.BLACK); // Set panel background to black
        panel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(76, 175, 80), 2),
                "Lecture Prelim Grade",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Segoe UI", Font.BOLD, 16),
                new Color(76, 175, 80)
        ));

        // Input fields with light text color
        prelimExamField = createInputField(panel, "Prelim Exam:");
        essayField = createInputField(panel, "Essay:");
        pvmField = createInputField(panel, "PVM (Max 60):");
        javaBasicsField = createInputField(panel, "Java Basics (Max 40):");
        introJsField = createInputField(panel, "Intro to JS (Max 40):");

        // Add checkboxes for specific absence dates
        JPanel absencePanel = new JPanel();
        absencePanel.setLayout(new GridLayout(5, 1)); // Vertical layout for checkboxes
        absencePanel.setBackground(Color.BLACK);
        absencePanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(76, 175, 80), 2),
                "Lecture Absences",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Segoe UI", Font.BOLD, 14),
                new Color(76, 175, 80)
        ));

        // Dates for checkboxes
        String[] absenceDates = {
            "January 21, 2025",
            "January 28, 2025",
            "February 04, 2025",
            "February 11, 2025",
            "February 18, 2025"
        };

        absenceCheckBoxes = new JCheckBox[absenceDates.length];

        // Create checkboxes for each absence date
        for (int i = 0; i < absenceDates.length; i++) {
            absenceCheckBoxes[i] = new JCheckBox(absenceDates[i]);
            absenceCheckBoxes[i].setForeground(Color.WHITE);
            absenceCheckBoxes[i].setBackground(Color.BLACK);
            absencePanel.add(absenceCheckBoxes[i]);
        }

        panel.add(absencePanel);

        // Calculate button
        JButton calcLectureGradeButton = new JButton("Calculate Lecture Grade");
        styleButton(calcLectureGradeButton);
        calcLectureGradeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculateLectureGrade();
            }
        });
        panel.add(calcLectureGradeButton);

        // Result labels with light color for text
        lectureGradeLabel = new JLabel("Lecture Prelim Grade: N/A");
        lectureGradeLabel.setForeground(Color.WHITE);
        lectureMessageLabel = new JLabel("");
        lectureMessageLabel.setForeground(Color.WHITE);
        lectureComputationArea = new JTextArea(10, 20); // Increased height for better readability
        lectureComputationArea.setEditable(false);
        lectureComputationArea.setBackground(Color.BLACK);
        lectureComputationArea.setForeground(Color.WHITE);
        lectureComputationArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        panel.add(lectureGradeLabel);
        panel.add(lectureMessageLabel);
        panel.add(new JScrollPane(lectureComputationArea));

        return panel;
    }

    private JPanel createLabPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(Color.BLACK); // Set panel background to black
        panel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(76, 175, 80), 2),
                "Laboratory Prelim Grade",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Segoe UI", Font.BOLD, 16),
                new Color(76, 175, 80)
        ));

        // Input fields with light text color
        java1Field = createInputField(panel, "Java 1:");
        java2Field = createInputField(panel, "Java 2:");
        js1Field = createInputField(panel, "JS1:");
        js2Field = createInputField(panel, "JS2:");
        mp1Field = createInputField(panel, "MP1:");
        mp2Field = createInputField(panel, "MP2:");
        mp3Field = createInputField(panel, "MP3:");
        mp3DocuField = createInputField(panel, "MP3 (Documentation):");

        // Add checkboxes for lab absences
        JPanel labAbsencePanel = new JPanel();
        labAbsencePanel.setLayout(new GridLayout(5, 1)); // Vertical layout for checkboxes
        labAbsencePanel.setBackground(Color.BLACK);
        labAbsencePanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(76, 175, 80), 2),
                "Lab Absences",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                new Font("Segoe UI", Font.BOLD, 14),
                new Color(76, 175, 80)
        ));

        // Dates for lab absence checkboxes
        String[] labAbsenceDates = {
            "January 21, 2025",
            "January 28, 2025",
            "February 04, 2025",
            "February 11, 2025",
            "February 18, 2025"
        };

        labAbsenceCheckBoxes = new JCheckBox[labAbsenceDates.length];

        // Create checkboxes for each lab absence date
        for (int i = 0; i < labAbsenceDates.length; i++) {
            labAbsenceCheckBoxes[i] = new JCheckBox(labAbsenceDates[i]);
            labAbsenceCheckBoxes[i].setForeground(Color.WHITE);
            labAbsenceCheckBoxes[i].setBackground(Color.BLACK);
            labAbsencePanel.add(labAbsenceCheckBoxes[i]);
        }

        panel.add(labAbsencePanel);

        // Calculate button
        JButton calcLabGradeButton = new JButton("Calculate Lab Grade");
        styleButton(calcLabGradeButton);
        calcLabGradeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculateLabGrade();
            }
        });
        panel.add(calcLabGradeButton);

        // Result labels with light color for text
        labGradeLabel = new JLabel("Laboratory Prelim Grade: N/A");
        labGradeLabel.setForeground(Color.WHITE);
        labMessageLabel = new JLabel("");
        labMessageLabel.setForeground(Color.WHITE);
        labComputationArea = new JTextArea(10, 20); // Increased height for better readability
        labComputationArea.setEditable(false);
        labComputationArea.setBackground(Color.BLACK);
        labComputationArea.setForeground(Color.WHITE);
        labComputationArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        panel.add(labGradeLabel);
        panel.add(labMessageLabel);
        panel.add(new JScrollPane(labComputationArea));

        return panel;
    }

    private JTextField createInputField(JPanel panel, String labelText) {
        JLabel label = new JLabel(labelText);
        label.setFont(new Font("Segoe UI", Font.PLAIN, 14)); // Use Segoe UI for modern look
        label.setForeground(Color.WHITE); // Set label color to white
        JTextField textField = new JTextField(5); // Set the number of columns to 5 for a shorter width
        textField.setMaximumSize(new Dimension(100, textField.getPreferredSize().height)); // Set a maximum width
        textField.setFont(new Font("Segoe UI", Font.PLAIN, 14)); // Modern font for text field
        textField.setForeground(Color.WHITE); // Set text color to white
        textField.setBackground(Color.DARK_GRAY); // Set text field background to dark gray
        textField.setCaretColor(Color.GREEN); // Set caret color (blinking cursor) to green
        panel.add(label);
        panel.add(textField);
        return textField;
    }

    private void styleButton(JButton button) {
        button.setBackground(new Color(76, 175, 80));
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Segoe UI", Font.BOLD, 14));
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.setPreferredSize(new Dimension(200, 40)); // Set fixed size for buttons
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(56, 142, 60)); // Darker green on hover
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(76, 175, 80)); // Original color
            }
        });
    }

    private void calculateLectureGrade() {
        try {
            double prelimExam = Double.parseDouble(prelimExamField.getText());
            double essay = Double.parseDouble(essayField.getText());
            double pvm = Math.min(Double.parseDouble(pvmField.getText()), 60);  // Enforce max value of 60
            double javaBasics = Math.min(Double.parseDouble(javaBasicsField.getText()), 40);  // Enforce max value of 40
            double introJs = Math.min(Double.parseDouble(introJsField.getText()), 40);  // Enforce max value of 40

            // Calculate lecture absences from the selected checkboxes
            int lectureAbsences = 0;
            for (JCheckBox checkBox : absenceCheckBoxes) {
                if (checkBox.isSelected()) {
                    lectureAbsences++;
                }
            }

            // If there are 4 or more absences, automatically fail
            if (lectureAbsences >= 4) {
                lectureGradeLabel.setText("Lecture Prelim Grade: FAIL");
                lectureMessageLabel.setText("You failed the lecture due to absences.");
                lectureMessageLabel.setForeground(Color.RED); // Red
                lectureComputationArea.setText("You have 4 or more absences, so you automatically fail.");
                return;
            }

            // Formula for Lecture Grade Calculation
            // Prelim Exam Grade = (essay + pvm + javaBasics + introJs) / 4
            double prelimQuizzes = (essay + pvm + javaBasics + introJs) / 4; // Average of the quizzes
            // Attendance Penalty = lectureAbsences * 10
            // Attendance = Math.max(100 - AttendancePenalty, 0)
            double attendancePenalty = lectureAbsences * 10; // Deduct 10 per absence
            double attendance = Math.max(100 - attendancePenalty, 0); // Max attendance is 100, penalize for absences
            // Prelim Class Standing = (PrelimExamGrade * 0.6) + (Attendance * 0.4)
            double prelimClassStanding = (prelimQuizzes * 0.6) + (attendance * 0.4);
            // Final Grade = (prelimExam * 0.6) + (PrelimClassStanding * 0.4)
            double lectureGrade = (prelimExam * 0.6) + (prelimClassStanding * 0.4);

            lectureGradeLabel.setText("Lecture Prelim Grade: " + String.format("%.2f", lectureGrade));
            lectureComputationArea.setText(getLectureComputationText(prelimExam, essay, pvm, javaBasics, introJs, lectureAbsences, prelimQuizzes, attendance, prelimClassStanding, lectureGrade));

            if (lectureGrade >= 75) {
                lectureMessageLabel.setText("Great job! You passed. Keep up the hard work!");
                lectureMessageLabel.setForeground(new Color(76, 175, 80)); // Green
            } else {
                lectureMessageLabel.setText("Don't give up! Keep pushing, you can do it.");
                lectureMessageLabel.setForeground(Color.YELLOW); // Yellow
            }

        } catch (NumberFormatException ex) {
            lectureGradeLabel.setText("Lecture Prelim Grade: N/A");
            lectureMessageLabel.setText("Please enter valid numbers.");
            lectureMessageLabel.setForeground(Color.RED); // Red
            lectureComputationArea.setText("");
        }
    }

    private String getLectureComputationText(double prelimExam, double essay, double pvm, double javaBasics, double introJs, int absences, double prelimQuizzes, double attendance, double prelimClassStanding, double finalGrade) {
        return String.format(
            "Lecture Prelim Grade Computation:\n\n" +
            "1. Prelim Exam Grade = (Essay + PVM + Java Basics + Intro to JS) / 4\n" +
            "   = (%.2f + %.2f + %.2f + %.2f) / 4 = %.2f\n\n" +
            "2. Attendance Penalty = Absences * 10\n" +
            "   = %d * 10 = %d\n" +
            "   Attendance = Max(100 - Attendance Penalty, 0)\n" +
            "   = Max(100 - %d, 0) = %.2f\n\n" +
            "3. Prelim Class Standing = (Prelim Exam Grade * 0.6) + (Attendance * 0.4)\n" +
            "   = (%.2f * 0.6) + (%.2f * 0.4) = %.2f\n\n" +
            "4. Final Lecture Grade = (Prelim Exam Grade * 0.6) + (Prelim Class Standing * 0.4)\n" +
            "   = (%.2f * 0.6) + (%.2f * 0.4) = %.2f",
            essay, pvm, javaBasics, introJs, prelimQuizzes,
            absences, absences * 10, absences * 10, attendance,
            prelimQuizzes, attendance, prelimClassStanding,
            prelimExam, prelimClassStanding, finalGrade
        );
    }

    private void calculateLabGrade() {
        try {
            // Similar code to calculate Lab Grade here...

        } catch (NumberFormatException ex) {
            // Handle errors
        }
    }

    public static void main(String[] args) {
        new GradeCalculator();
    }
}
