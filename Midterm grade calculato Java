import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList; // Import ArrayList explicitly
import java.util.Arrays;
import java.util.HashMap; // Import HashMap explicitly
import java.util.List; // Import List explicitly
import java.util.Map; // Import Map explicitly
import java.util.TreeSet; // Import TreeSet for sorting

public class GameEarningsAnalysis {

    private static Map<Integer, Double> averageEarnings; // Store average earnings for export

    public static void main(String[] args) {
        // Open file chooser to select the CSV file
        String csvFile = selectFile();
        if (csvFile == null) {
            System.out.println("No file selected. Exiting program.");
            return;
        }

        // Process the selected file
        List<GameData> gameDataList = readCSV(csvFile);
        Map<Integer, List<Double>> earningsByYear = processData(gameDataList);
        averageEarnings = calculateAverageEarnings(earningsByYear); // Store for later use

        // Print summary of the average earnings by year
        printSummary(averageEarnings);

        // Generate and display the bar chart for the average earnings by year
        generateBarChart(averageEarnings);
    }

    // Class to store each game's data (release year and total earnings)
    static class GameData {
        int releaseYear;
        double totalMoney;

        public GameData(int releaseYear, double totalMoney) {
            this.releaseYear = releaseYear;
            this.totalMoney = totalMoney;
        }
    }

    // Open file chooser dialog to select CSV file
    public static String selectFile() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select CSV File");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV Files", "csv"));
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile().getAbsolutePath();
        } else {
            return null; // User canceled file selection
        }
    }

    // Read CSV file and parse data into a list of GameData objects
    public static List<GameData> readCSV(String csvFile) {
        List<GameData> gameDataList = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {
            String line;
            reader.readLine(); // Skip header row
            while ((line = reader.readLine()) != null) {
                String[] tokens = line.split(",");
                try {
                    // Assuming the release year is the last column and total earnings are second to last
                    int releaseYear = Integer.parseInt(tokens[tokens.length - 1].trim());  // Last column is Release Year
                    double totalMoney = Double.parseDouble(tokens[tokens.length - 2].trim());  // Second last column is TotalMoney
                    gameDataList.add(new GameData(releaseYear, totalMoney));
                } catch (NumberFormatException e) {
                    System.err.println("Error parsing data: " + Arrays.toString(tokens));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return gameDataList;
    }

    // Process the data to group earnings by release year
    public static Map<Integer, List<Double>> processData(List<GameData> gameDataList) {
        Map<Integer, List<Double>> earningsByYear = new HashMap<>();
        for (GameData game : gameDataList) {
            earningsByYear
                .computeIfAbsent(game.releaseYear, k -> new ArrayList<>())
                .add(game.totalMoney);
        }
        return earningsByYear;
    }

    // Calculate the average earnings per release year
    public static Map<Integer, Double> calculateAverageEarnings(Map<Integer, List<Double>> earningsByYear) {
        Map<Integer, Double> averageEarnings = new HashMap<>();
        for (Map.Entry<Integer, List<Double>> entry : earningsByYear.entrySet()) {
            int year = entry.getKey();
            List<Double> earnings = entry.getValue();
            double sum = 0;
            for (double earning : earnings) {
                sum += earning;
            }
            averageEarnings.put(year, sum / earnings.size());  // Calculate average
        }
        return averageEarnings;
    }

    // Print the summary of average earnings by year
    public static void printSummary(Map<Integer, Double> averageEarnings) {
        System.out.println("Average Earnings by Release Year:");
        for (Map.Entry<Integer, Double> entry : averageEarnings.entrySet()) {
            System.out.printf("Year: %d, Average Earnings: $%.2f%n", entry.getKey(), entry.getValue());
        }
    }

    // Generate a bar chart for the average earnings by release year
    public static void generateBarChart(Map<Integer, Double> averageEarnings) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        int[] allYears = {11, 1981, 1989, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 
                          2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 
                          2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 
                          2016, 2017, 2018, 2019, 2020};

        for (int year : allYears) {
            double earnings = averageEarnings.getOrDefault(year, 0.0);
            dataset.addValue(earnings, "Average Earnings", String.valueOf(year));
        }

        JFreeChart barChart = ChartFactory.createBarChart(
                "Average Earnings by Release Year",
                "Release Year",
                "Average Earnings",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false
        );

        CategoryPlot plot = barChart.getCategoryPlot();
        CategoryAxis axis = plot.getDomainAxis();
        axis.setTickLabelFont(new Font("Arial", Font.PLAIN, 10));
        axis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 4.0)); // Rotate labels

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        ChartPanel chartPanel = new ChartPanel(barChart);
        chartPanel.setPreferredSize(new Dimension(800, 600));
        panel.add(chartPanel, BorderLayout.CENTER);

        JButton exportButton = new JButton("Export Average Earnings to CSV");
        exportButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Specify a file to save");
                fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV Files", "csv"));

                int userSelection = fileChooser.showSaveDialog(null);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    if (!fileToSave.getAbsolutePath().endsWith(".csv")) {
                        fileToSave = new File(fileToSave.getAbsolutePath() + ".csv");
                    }
                    exportProcessedData(averageEarnings, fileToSave);
                }
            }
        });

        panel.add(exportButton, BorderLayout.SOUTH);

        JFrame frame = new JFrame("Game Earnings Analysis");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(panel);
        frame.pack();
        frame.setLocationRelativeTo(null); // Center the frame
        frame.setVisible(true);
    }

    // Export the processed data to a CSV file
    public static void exportProcessedData(Map<Integer, Double> averageEarnings, File file) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write("Year,Average Earnings\n");
            for (Map.Entry<Integer, Double> entry : averageEarnings.entrySet()) {
                writer.write(entry.getKey() + "," + entry.getValue() + "\n");
            }
            System.out.println("Data exported successfully to " + file.getAbsolutePath());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
